var documenterSearchIndex = {"docs":
[{"location":"man/lineargmm/#Linear-GMM","page":"Linear GMM","title":"Linear GMM","text":"","category":"section"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"An explicit solution for minimizing the criterion function is available when the moment conditions take the special form","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"mathrmEleft(Y_i - thetamathbfX_i) mathbfZ_iright = mathbf0","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"where the residuals from linear equations are orthogonal to a vector of instruments. In this case, an optimization solver is unnecessary for the estimation. If the parameters are just-identified, we have","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"hattheta = (mathbfZmathbfX)^-1mathbfZmathbfY","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"where mathbfZ, mathbfX and mathbfY are matrices formed by stacking mathbfZ_i, mathbfX_i and Y_i across observations. The parameter estimates can be obtained in one step by directly solving the linear problems. They are the IV estimates from linear regressions. If the parameters are over-identified, we have","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"hattheta = (mathbfXmathbfZmathbfWmathbfZmathbfX)^-1\nmathbfXmathbfZmathbfWmathbfZmathbfY","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"where mathbfW is a weight matrix. The parameter estimates can be obtained iteratively as for the general nonlinear scenario. However, we directly evaluate hattheta in each iteration. The two-stage least squares (2SLS) estimator can be viewed as a special case where the weight matrix is specified as","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"mathbfW = left(mathbfZmathbfZright)^-1","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"with no further iteration conducted upon the first evaluation.","category":"page"},{"location":"man/lineargmm/#Example:-Two-Stage-Least-Squares","page":"Linear GMM","title":"Example: Two-Stage Least Squares","text":"","category":"section"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"We replicate Example 2 from Stata manual for gmm:","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"using MethodOfMoments, CSV, DataFrames\n# exampledata loads data from CSV files bundled with MethodOfMoments.jl\nexampledata(name::Union{Symbol,String}) =\n    DataFrame(CSV.read(MethodOfMoments.datafile(name), DataFrame), copycols=true)\n\ndata = exampledata(:hsng2)\nvce = RobustVCE(3, 6, size(data,1))\neq = (:rent, (:hsngval, :pcturban), (:pcturban, :faminc, Symbol.(:reg, 2:4)...))\nr = fit(IteratedLinearGMM, vce, data, eq, maxiter=1)","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"Notice that we have specified the estimator by passing IteratedLinearGMM as the first argument. However, for 2SLS estimation, we restrict maxiter=1 to avoid further iterations. The regression equation is specified as a Tuple of three elements where the first one is the column name of the outcome variable in data. The second and third elements are the names of endogenous variables and IVs respectively. Unless a keyword of nocons is specified, a constant term named cons is added automatically for the endogenous variables and IVs. The default initial weight matrix for IteratedLinearGMM is the one that gives us 2SLS estimates.","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"warning: Warning\nThe implementation of the estimator does not handle multicollinearity issues. In case some of the regressors are highly correlated, the estimator may fail to generate a result.","category":"page"},{"location":"man/lineargmm/#GMMIVexample","page":"Linear GMM","title":"Example: GMM IV Estimation with Clustering","text":"","category":"section"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"We replicate Example 4 from Stata manual for ivregress:","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"data = exampledata(:nlswork)\ndata[!,:age2] = data.age.^2\ndropmissing!(data, [:ln_wage, :age, :birth_yr, :grade, :tenure, :union, :wks_work, :msp])\nvce = ClusterVCE(data, :idcode, 6, 8)\neq = (:ln_wage, (:tenure=>[:union, :wks_work, :msp], :age, :age2, :birth_yr, :grade))\nr = fit(IteratedLinearGMM, vce, data, eq, maxiter=2)","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"Here we make use of the cluster-robust VCE via ClusterVCE and specify idcode as the variable that identifies the clusters. The regression equation is specified in an alternative format with a Tuple only containing two elements. The first element is still the name of the outcome variable. The second element contains the names of all the regressors, with the endogenous variable tenure being paired with a vector of IVs.","category":"page"},{"location":"man/lineargmm/#Example:-System-of-Simultaneous-Equations","page":"Linear GMM","title":"Example: System of Simultaneous Equations","text":"","category":"section"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"It is possible to specify a system of equations that are estimated jointly. We consider a modified Example 16 from Stata manual for gmm, replacing the variance-covariance estimator with RobustVCE:[1]","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"[1]: Identical estimates can be produced in Stata by changing the wmatrix option to wmatrix(robust).","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"data = exampledata(:klein)\nvce = RobustVCE(7, 8, nrow(data))\neqs = [(:consump, (:wagepriv, :wagegovt), (:wagegovt, :govt, :capital1)),\n    (:wagepriv, (:consump, :govt, :capital1), (:wagegovt, :govt, :capital1))]\nr = fit(IteratedLinearGMM, vce, data, eqs, maxiter=2)","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"For multiple equations, we simply need to collect the specification for each equation in a vector. The name of each parameter is prepended by its corresponding outcome variable in order to distinguish the equation it belongs to.","category":"page"},{"location":"man/lineargmm/#Example:-Just-Identified-IV-Regression","page":"Linear GMM","title":"Example: Just-Identified IV Regression","text":"","category":"section"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"Lastly, we illustrate the use of the specialized estimator JustIdentifiedLinearGMM for the just-identified linear GMM using the auto dataset from Stata:","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"data = exampledata(:auto)\nvce = RobustVCE(3, 3, size(data,1))\neq = (:mpg, [:weight, :length=>:trunk])\nr = fit(JustIdentifiedLinearGMM, vce, data, eq)","category":"page"},{"location":"man/lineargmm/","page":"Linear GMM","title":"Linear GMM","text":"note: Note\nThe familiar OLS regression is estimated if we omit the IV in this example.","category":"page"},{"location":"man/bayesian/#Bayesian-Quasi-Likelihood","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"","category":"section"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"Estimation of nonlinear GMM involves the use of optimization solvers. An alternative approach that circumvents the need for such solvers treats the criterion function as a quasi-likelihood function for tracing out quasi-posterior functions of the parameters, using a Markov Chain Monte Carlo (MCMC) method (Chernozhukov and Hong, 2003). Specifically, we multiply the criterion function shown in Generalized Method of Moments by -frac12 to obtain the quasi-likelihood.","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"MethodOfMoments.jl provides support for incorporating the quasi-likelihood evaluation in a MCMC sampler by implementing the LogDensityProblems.jl interface. This allows the users to leverage readily available MCMC samplers from the Julia ecosystem without the need to defining the quasi-likelihood functions from scratch. For example, packages such as AdvancedMH.jl for Metropolis-Hastings algorithms recognize the capability of MethodOfMoments.jl for evaluating the log-density.","category":"page"},{"location":"man/bayesian/#Example:-Defining-Log-Density-for-MCMC","page":"Bayesian Quasi-Likelihood","title":"Example: Defining Log-Density for MCMC","text":"","category":"section"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"We reuse the data and specifications from Example: Exponential Regression with Instruments.","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"# Assume objects from previous example are already defined\nusing Distributions\nparams = (:private=>Uniform(-1,2), :chronic=>Uniform(-1,2),\n    :female=>Uniform(-1,2), :income=>Uniform(-1,2), :cons=>Normal())\nm = BayesianGMM(vce, g, dg, params, 7, length(data))","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"Above, we provide the names of each parameter and their prior distributions using distributions defined in Distributions.jl. A BayesianGMM contains the ingredients required for computing the log-posterior:","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"θ = [0.5, 1, 1, 0.1, 0.1]\nlogposterior!(m, θ)","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"To run a Metropolis-Hastings sampler, we may proceed as follows:","category":"page"},{"location":"man/bayesian/","page":"Bayesian Quasi-Likelihood","title":"Bayesian Quasi-Likelihood","text":"using AdvancedMH, MCMCChains, LinearAlgebra\n\nspl = MetropolisHastings(RandomWalkProposal{true}(MvNormal(zeros(5), 0.5*I(5))))\nN = 10_000\nchain = sample(m, spl, N, init_params=θ, param_names=m.params, chain_type=Chains)","category":"page"},{"location":"man/nonlineargmm/#Generalized-Method-of-Moments","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"In general, a GMM estimator chooses the point estimate theta by minimizing the following criterion function","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Q(theta) = leftfrac1Nsum_i=1^N mathbfg_i(theta)rightmathbfWleftfrac1Nsum_i=1^N mathbfg_i(theta)right","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"where mathbfg_i(theta) is a vector of residuals from evaluating the moment conditions with parameter vector theta and observation i of a sample consisting of N observations. When the number of moment conditions (length of mathbfg_i(theta)) is greater than the number of parameters (length of theta), the parameters are over-identified. In this case, mathbfW is a weight matrix affecting the relative importance of each moment condition for the criterion function. When the number of moment conditions matches the number of parameters, the weight matrix is irrelevant and the parameters are just-identified.[1]","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"[1]: A suitable rank condition is assumed for discussing the number of moment conditions to be meaningful.","category":"page"},{"location":"man/nonlineargmm/#Nonlinear-Iterated-GMM-Estimator","page":"Generalized Method of Moments","title":"Nonlinear Iterated GMM Estimator","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"An iterated GMM estimator is implemented for some arbitrary moment conditions provided by users. This allows estimating nonlinear GMM via the iterative method considered in Hansen et al. (1996). In particular, the two-step GMM estimator is a special case where the number of iterations is restricted to two.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Starting from an initial weight matrix mathbfW^(1), the iterated GMM estimator iterates through the following steps for kgeq 1:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Given a weight matrix mathbfW^(k), find theta^(k) that minimizes the criterion function.\nGiven the minimizer theta^(k), compute a new weight matrix mathbfW^(k+1) using the inverse of the variance-covariance matrix estimated from the moment conditions mathbfg_i(theta^(k)) for each i.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"The above iterations continue until one of the two conditions are met:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"theta^(k+1) is sufficiently close to theta^(k).\nA maximum number of iterations is reached.","category":"page"},{"location":"man/nonlineargmm/#Example:-Exponential-Regression-with-Instruments","page":"Generalized Method of Moments","title":"Example: Exponential Regression with Instruments","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"To illustrate the use of such an estimator, we replicate Example 8 from Stata manual for gmm. The data for this example are included in MethodOfMoments.jl for convenience and can be loaded as below:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"using MethodOfMoments, CSV, DataFrames, TypedTables\n# exampledata loads data from CSV files bundled with MethodOfMoments.jl\nexampledata(name::Union{Symbol,String}) =\n    DataFrame(CSV.read(MethodOfMoments.datafile(name), DataFrame), copycols=true)\n\ndata = Table(exampledata(:docvisits))","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Above, the data frame is converted to a Table from TypedTables.jl for a convenient syntax of evaluating moment conditions by row while being fast.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"warning: Warning\nIt is important to clean the sample before conducting estimation. The estimator does not handle invalid values such as missing and NaN when evaluating the moment conditions.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"For this example, the moment conditions can be written as","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"mathrmEmathbfg_i(theta) =\nmathrmEleft (Y_i - exp(thetamathbfX_i)) mathbfZ_i  right = mathbf0","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"where the residual from the structural equation","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Y_i = exp(thetamathbfX_i) + varepsilon_i","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"is assumed to be orthogonal to a vector of instruments mathbfZ_i.","category":"page"},{"location":"man/nonlineargmm/#Specifying-Moment-Conditions-and-Their-Derivatives","page":"Generalized Method of Moments","title":"Specifying Moment Conditions and Their Derivatives","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"The moment conditions and their derivatives with respect to the parameters need to be provided as Julia functions that are going to be evaluated for individual observations. They are required to accept the parameters as the first argument and the row index of the data frame as the second argument. For the moment conditions, the function should return the residuals from evaluating the moment conditions for a specific observation as an iterable object such as a Tuple or a static vector SVector. For the derivatives, the function should return a Jacobian matrix with rows corresponding to the moment conditions and columns corresponding to the parameters.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"For example, the moment conditions could be defined as follows:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"using StaticArrays\n\nstruct g_stata_gmm_ex8{D}\n    data::D\nend\n\nfunction (g::g_stata_gmm_ex8)(θ, r)\n    @inbounds d = g.data[r]\n    x = SVector{5,Float64}((d.private, d.chronic, d.female, d.income, 1.0))\n    z = SVector{7,Float64}((d.private, d.chronic, d.female, d.age, d.black, d.hispanic, 1.0))\n    return (d.docvis - exp(θ'x)) .* z\nend","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Notice that since such functions typically need to retrieve values from a data frame that is not an argument of the functions, a struct wrapping the data frame has been defined and a method is attached to the struct following the requirement for the arguments.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"info: Info\nIllustrations for adding a method to a struct is available here from Julia documentation.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"To simplify the above definition, a macro @dgd is provided. This allows defining a struct as in the above example by prepending @dgd to the function definition without typing the definition for the struct:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"using StaticArrays\n\n@gdg function (g::g_stata_gmm_ex8)(θ, r)\n    @inbounds d = g.data[r]\n    x = SVector{5,Float64}((d.private, d.chronic, d.female, d.income, 1.0))\n    z = SVector{7,Float64}((d.private, d.chronic, d.female, d.age, d.black, d.hispanic, 1.0))\n    return (d.docvis - exp(θ'x)) .* z\nend\n\ng = g_stata_gmm_ex8(data)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"info: Info\nUsing SVector from StaticArrays.jl instead of Vector avoids memory allocations while preserving the syntax for array operations.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"For minimizing the criterion function and computing the variance-covariance matrix, we additionally require the derivatives of the moment conditions with respect to each parameter. They can be defined in a similar fashion as below:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"@gdg function (dg::dg_stata_gmm_ex8)(θ, r)\n    @inbounds d = dg.data[r]\n    x = SVector{5,Float64}((d.private, d.chronic, d.female, d.income, 1.0))\n    z = SVector{7,Float64}((d.private, d.chronic, d.female, d.age, d.black, d.hispanic, 1.0))\n    return z .* (- exp(θ'x) .* x')\nend\n\ndg = dg_stata_gmm_ex8(data)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"warning: Warning\nThe users are expected to order the parameters and moment conditions consistently. An index k for a parameter should always refer to the same parameter whenever a vector of parameters is involved. A similar requirement holds for the moment conditions.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"note: Note\nThe performance of these functions evaluating the moment conditions and their derivatives is important for the run time of the estimator, especially when the sample size is large. The users are recommended to profile these functions to ensure they have acceptable performance. Ideally, these functions should be non-allocating and type stable.","category":"page"},{"location":"man/nonlineargmm/#Specifying-Variance-Covariance-Estimator","page":"Generalized Method of Moments","title":"Specifying Variance-Covariance Estimator","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"A variance-covariance estimator (VCE) provides information for inference. With the iterated GMM estimator, the VCE additionally instructs how the weight matrix mathbfW^(k) is updated in each iteration.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"MethodOfMoments.jl implements two VCEs:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"The Eicker-Huber-White heteroskedasticity-robust VCE.\nThe multiway cluster-robust VCE as in Cameron et al. (2011).","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Here, we specify the heteroskedasticity-robust VCE by constructing a RobustVCE, specifying the numbers of parameters, moment conditions and observations as arguments:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"vce = RobustVCE(5, 7, length(data))","category":"page"},{"location":"man/nonlineargmm/#Obtaining-the-Estimation-Results","page":"Generalized Method of Moments","title":"Obtaining the Estimation Results","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"We are now ready to conduct the estimation:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"# Specify parameter names\nparams = (:private, :chronic, :female, :income, :cons)\n# Conduct the estimation\nr = fit(IteratedGMM, Hybrid, vce, g, dg, params, 7, length(data), maxiter=2, ntasks=2)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"We have specified the estimator by providing IteratedGMM as the first argument. For minimizing the criterion function, we have used the Hybrid solver from NonlinearSystems.jl, which is a native Julia implementation of the hybrid method from MINPACK with minor revisions. With the keyword argument maxiter=2, we only conduct two steps for the iteration. The moment conditions across observations are evaluated in parallel with two threads specified with ntasks=2. If ntasks is not specified, a default value will be determined based on the sample size.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"info: Info\nThe Hybrid solver from NonlinearSystems.jl is the only solver bundled with MethodOfMoments.jl at this moment. It is possible to swap the solver, although that should be unnecessary in typical use cases.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Interface for retrieving the estimation results is defined following StatsAPI.jl. For example, to obtain the point estimates:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"coef(r)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"To obtain the standard errors:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"stderror(r)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"To obtain 90% confidence intervals:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"lb, ub = confint(r; level=0.9)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"When the parameters are over-identified, the Hansen's J statistic can be retrieved:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Jstat(r)","category":"page"},{"location":"man/nonlineargmm/#Iterating-Step-by-Step","page":"Generalized Method of Moments","title":"Iterating Step by Step","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Results of iterating the GMM estimator for a small number of steps can be obtained by setting the keyword argument maxiter. Furthermore, there is no need to restart the entire estimation procedure for different numbers of steps. Suppose we are interested in the results for both the one-step and two-step GMM estimators, we can first obtain the results from the first step:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"# One-step GMM\nr = fit(IteratedGMM, Hybrid, vce, g, dg, params, 7, length(data), maxiter=1)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"After copying the estimates of interest (e.g., copy(coef(r))), we proceed to the next step using fit! that updates the results in-place:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"# Two-step GMM without repeating the first step\nfit!(r, maxiter=2)","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Notice that we have reused the same result object r and set a different value for maxiter.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"info: Info\nThe Hansen's J statistic is not reported for one-step GMM estimators (Jstat returns NaN). This is because the initial weight matrix for the GMM criterion can be arbitrary, resulting in meaningless scaling for Q(theta).","category":"page"},{"location":"man/nonlineargmm/#Implementation-Details","page":"Generalized Method of Moments","title":"Implementation Details","text":"","category":"section"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Instead of literally solving a minimization problem defined with the scalar-valued criterion function Q(theta), the estimator solves a least squares problem for the vector-valued moment conditions after adjusting the weights using the Hybrid solver designed for systems of nonlinear equations. This relies on the assumption that the weight matrix should always be positive definite and hence can be decomposed as a product of a triangular matrix and its conjugate transpose with Cholesky decomposition. This approach tends to be much faster than solving the scalar-valued problem, as it exploits more information from the Jacobian matrix of the moment conditions relative to the gradient vector for the scalar-valued problem.","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"Nonetheless, solvers for scalar-valued functions from NLopt.jl are supported:","category":"page"},{"location":"man/nonlineargmm/","page":"Generalized Method of Moments","title":"Generalized Method of Moments","text":"using NLopt\nopt = NLopt.Opt(:LN_NELDERMEAD, length(params))\nr = fit(IteratedGMM, opt, vce, g, dg, params, 7, length(data), maxiter=2)","category":"page"},{"location":"#MethodOfMoments.jl","page":"Home","title":"MethodOfMoments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation site for MethodOfMoments.jl!","category":"page"},{"location":"","page":"Home","title":"Home","text":"MethodOfMoments.jl is a Julia package for generalized method of moments (GMM) estimation. It is designed with performance in mind for estimation involving large datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GMM is a versatile and widely used econometric approach for parameter estimation in economics and finance. Notably, the ordinary least squares (OLS) estimator in linear regression can be viewed as a GMM estimator with a specific form of moment conditions. More broadly, GMM allows researchers to estimate parameters in theoretical models without fully specifying the data-generating process, making it especially valuable when assumptions about the data are hard to defend.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fast multi-threaded nonlinear iterated GMM estimation\nSpecialized methods for linear GMM\nSupport for Bayesian quasi-likelihood approach","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MethodOfMoments.jl can be installed with the Julia package manager Pkg. From the Julia REPL, type ] to enter the Pkg REPL and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add MethodOfMoments","category":"page"},{"location":"refs/#References","page":"References","title":"References","text":"","category":"section"},{"location":"refs/","page":"References","title":"References","text":"Cameron, A. C.; Gelbach, J. B. and Miller, D. L. (2011). Robust Inference with Multiway Clustering. Journal of Business & Economic Statistics 29, 238–249.\n\n\n\nChernozhukov, V. and Hong, H. (2003). An MCMC Approach to Classical Estimation. Journal of Econometrics 115, 293–346.\n\n\n\nHansen, L. P.; Heaton, J. and Yaron, A. (1996). Finite-Sample Properties of Some Alternative GMM Estimators. Journal of Business & Economic Statistics 14, 262–280.\n\n\n\n","category":"page"},{"location":"man/cugmm/#Continuous-Updating-GMM","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"","category":"section"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"Instead of taking the weight matrix as given when evaluating the criterion function, a contiuous-updating (also known as continuously-updated, or CU) GMM estimator updates the weight matrix simultaneously when the parameter vector theta is altered. Specifically, the criterion function","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"Q(theta) = leftfrac1Nsum_i=1^N mathbfg_i(theta)rightmathbfW(theta)leftfrac1Nsum_i=1^N mathbfg_i(theta)right","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"now takes mathbfW as a function of theta, which typically is the inverse of the variance-covariance estimator. Starting from a guess for the initial value of theta, the CUGMM estimator solves an optimization problem with Q(theta) as the objective function.","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"Implementations for both nonlinear and linear moment conditions are provided via estimator types CUGMM and LinearCUGMM. Clearly, the CUGMM estimator is relevant only when the number of moment conditions exceeds the number of parameters.","category":"page"},{"location":"man/cugmm/#Example:-IV-Estimation-with-CUGMM","page":"Continuous-Updating GMM","title":"Example: IV Estimation with CUGMM","text":"","category":"section"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"We revisit the GMM IV example with CUGMM:","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"using MethodOfMoments, CSV, DataFrames # hide\nexampledata(name::Union{Symbol,String}) = # hide\n    DataFrame(CSV.read(MethodOfMoments.datafile(name), DataFrame), copycols=true) # hide\ndata = exampledata(:nlswork) # hide\ndata[!,:age2] = data.age.^2 # hide\ndropmissing!(data, [:ln_wage, :age, :birth_yr, :grade, :tenure, :union, :wks_work, :msp]) # hide\nvce = ClusterVCE(data, :idcode, 6, 8)\neq = (:ln_wage, (:tenure=>[:union, :wks_work, :msp], :age, :age2, :birth_yr, :grade))\nr = fit(LinearCUGMM, Hybrid, vce, data, eq)","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"Above, we have used the Hybrid solver from NonlinearSystems.jl. The moment conditions are specified in the same way as before for Linear GMM.","category":"page"},{"location":"man/cugmm/","page":"Continuous-Updating GMM","title":"Continuous-Updating GMM","text":"Nonlinear CUGMM estimation is supported with a syntax similar to that for IteratedGMM via CUGMM.","category":"page"}]
}
